<?xml version="1.0" encoding="UTF-8"?>

<!-- Log4j allows a filter to be specified in any of 4 places: -->
<!--  !. At the same level as the appenders, loggers and properties elements. These filters can accept or reject
             events before they have been passed to a LoggerConfig. -->
<!--  2. In a logger element. These filters can accept or reject events for specific loggers. -->
<!--  3. In an appender element. These filters can prevent or cause events to be processed by the appender. -->
<!--  4. In an appender reference element. These filters are used to determine if a Logger should route the event to an appender. -->
<Configuration status="debug" name="XMLConfigTest" packages="org.apache.logging.log4j.test">
    <Properties>
        <Property name="filename">target/test.log</Property>
    </Properties>

    <!-- The ScriptFilter executes a script that returns true or false. -->
    <Scripts>
        <!-- Script can be inline instead of a file -->
        <Script name="selector" language="javascript"><![CDATA[
            var result;
            if (logEvent.getLoggerName().equals("JavascriptNoLocation")) {
                result = "NoLocation";
            } else if (logEvent.getMarker() != null && logEvent.getMarker().isInstanceOf("FLOW")) {
                result = "Flow";
            }
            result;
            ]]></Script>
        <ScriptFile name="filter.js" language="JavaScript" path="src/test/resources/scripts/filter.js" charset="UTF-8" />
        <ScriptFile name="filter.groovy" language="groovy" path="src/test/resources/scripts/filter.groovy" charset="UTF-8" />
    </Scripts>
    <!-- The DynamicThresholdFilter allows filtering by log level based on specific attributes. For example,
         if the user's loginId is being captured in the ThreadContext Map then it is possible to enable debug
         logging for only that user. If the log event does not contain the specified ThreadContext item NEUTRAL
         will be returned. -->
    <DynamicThresholdFilter key="loginId" defaultThreshold="ERROR"
                            onMatch="ACCEPT" onMismatch="NEUTRAL">
        <!-- One or more KeyValuePair elements that define the matching value for the
             key and the Level to evaluate when the key matches. -->
        <KeyValuePair key="User1" value="DEBUG" />
    </DynamicThresholdFilter>
    <!-- The MapFilter allows filtering against data elements that are in a MapMessage. -->
    <!-- If the operator is "or" then a match by any one of the key/value pairs will be considered to be a match,
         otherwise all the key/value pairs must match. -->
    <MapFilter onMatch="ACCEPT" onMismatch="NEUTRAL" operator="or">
        <KeyValuePair key="eventId" value="Login"/>
        <KeyValuePair key="eventId" value="Logout"/>
    </MapFilter>
    <!-- The ThreadContextMapFilter or ContextMapFilter allows filtering against data elements that are
         in the current context. By default this is the ThreadContext Map. -->
    <!-- If the operator is "or" then a match by any one of the key/value pairs will be considered to be
         a match, otherwise all the key/value pairs must match. -->
    <ContextMapFilter onMatch="ACCEPT" onMismatch="NEUTRAL" operator="or">
        <KeyValuePair key="User1" value="DEBUG"/>
        <KeyValuePair key="User2" value="WARN"/>
    </ContextMapFilter>
    <!-- This filter returns the onMatch result if the level in the LogEvent is the same or more specific
          than the configured level and the onMismatch value otherwise. For example, if the ThresholdFilter
          is configured with Level ERROR and the LogEvent contains Level DEBUG then the onMismatch value
          will be returned since ERROR events are more specific than DEBUG. -->
    <ThresholdFilter level="trace"/>
    <!-- The time filter can be used to restrict filter to only a certain portion of the day. -->
    <TimeFilter start="05:00:00" end="05:30:00" onMatch="ACCEPT" onMismatch="DENY"/>

    <Appenders>
        <Console name="STDOUT">
            <PatternLayout pattern="%m MDC%X%n"/>
        </Console>
        <Console name="FLOW">
            <!-- this pattern outputs class name and line number: performance hit -->
            <PatternLayout pattern="%C{1}.%M %m %ex%n"/>
            <!-- CompositeFilter - provides a way to specify more than one filter -->
            <filters>
                <!-- The MarkerFilter compares the configured Marker value against the Marker that is
                     included in the LogEvent. A match occurs when the Marker name matches either the
                     Log Event's Marker or one of its parents. -->
                <MarkerFilter marker="FLOW" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <MarkerFilter marker="EXCEPTION" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
        </Console>
        <RollingFile name="RollingFile" fileName="logs/app.log"
                     filePattern="logs/app-%d{MM-dd-yyyy}.log.gz">
            <!-- The RegexFilter allows the formatted or unformatted message to be compared against a regular expression. -->
            <!-- If useRawMsg true, the unformatted message will be used, otherwise the formatted message will be used.
                 The default value is false. -->
            <RegexFilter regex=".* test .*" onMatch="ACCEPT" onMismatch="DENY" useRawMsg="true"/>
            <!-- The NoMarkerFilter checks that there is no marker included in the LogEvent. A match occurs
                 when there is no marker in the Log Event. -->
            <NoMarkerFilter onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- The BurstFilter provides a mechanism to control the rate at which LogEvents are processed
                 by silently discarding events after the maximum limit has been reached. -->
            <BurstFilter level="INFO" rate="16" maxBurst="100"/>
            <PatternLayout>
                <pattern>%d %p %c{1.} [%t] %m%n</pattern>
            </PatternLayout>
            <TimeBasedTriggeringPolicy />
        </RollingFile>
        <File name="File" fileName="${filename}">
            <PatternLayout>
                <pattern>%d %p %C{1.} [%t] %m%n</pattern>
            </PatternLayout>
        </File>
    </Appenders>

    <Loggers>
        <Logger name="org.apache.logging.log4j.test1" level="debug" additivity="false">
            <ThreadContextMapFilter>
                <KeyValuePair key="test" value="123"/>
            </ThreadContextMapFilter>
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <Logger name="org.apache.logging.log4j.test2" level="debug" additivity="false">
            <Property name="user">${sys:user.name}</Property>
            <AppenderRef ref="File">
                <ThreadContextMapFilter>
                    <KeyValuePair key="test" value="123"/>
                </ThreadContextMapFilter>
            </AppenderRef>
            <AppenderRef ref="STDOUT" level="error"/>
        </Logger>

        <Root level="trace">
            <AppenderRef ref="STDOUT"/>
        </Root>
    </Loggers>

</Configuration>